name: Deploy to Production

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to DigitalOcean
    steps:
      - name: Decode SSH key (from base64) and show fingerprint
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY_B64 }}" | base64 --decode > ./deploy_key
          chmod 600 ./deploy_key
          echo "== derived public key from deploy_key =="
          ssh-keygen -y -f ./deploy_key || true
          echo "== fingerprint of deploy_key =="
          ssh-keygen -lf ./deploy_key || true
        shell: bash

      - name: Show droplet authorized_keys fingerprints (via temporary SSH using your working key)
        run: |
          # This uses your working key (id_exploitdo) which you said works from the runner machine? 
          # If your runner cannot use your laptop key, run the second command below locally instead.
          echo "Attempting to connect using the known-working local key to list authorized_keys fingerprints..."
          ssh -i ~/.ssh/id_exploitdo -o StrictHostKeyChecking=no root@${{ secrets.DROPLET_IP }} "echo '== authorized_keys contents =='; cat /root/.ssh/authorized_keys; echo '== authorized_keys fingerprints =='; while read -r line; do echo \"$line\" | ssh-keygen -lf -; done < /root/.ssh/authorized_keys" || echo "Could not run remote listing from runner; run the equivalent locally on your laptop and paste output."
        shell: bash

      - name: SSH verbose test (shows exactly what key is offered and server response)
        run: |
          echo "Running ssh -vvv using the runner's deploy_key (this will print 'Offering public key' lines)..."
          ssh -vvv -i ./deploy_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@${{ secrets.DROPLET_IP }} true || true
          echo "Finished ssh -vvv test (exit code may be non-zero). Search the log above for 'Offering public key' and 'Permission denied'."
        shell: bash

      - name: üöÄ Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: root
          key_path: ./deploy_key
          port: 22
          script_stop: true
          script: |
            set -e
            echo "üöÄ Starting safe deployment..."
            mkdir -p ~/backups/pre-deployment-$(date +%Y%m%d_%H%M%S)
            BACKUP_DIR=~/backups/pre-deployment-$(date +%Y%m%d_%H%M%S)
            sudo -u postgres pg_dump xploitrum > $BACKUP_DIR/database_backup.sql || echo "‚ö†Ô∏è Could not backup database"
            cp ~/xploitrum.org/backend/.env $BACKUP_DIR/.env || echo "‚ö†Ô∏è Could not backup .env"
            cd ~/xploitrum.org
            git fetch origin
            git pull origin main || git pull origin master
            COMMIT=$(git rev-parse --short HEAD)
            echo "üì¶ Deployed commit: $COMMIT"
            cd backend
            source venv/bin/activate || true
            pip install -r requirements.txt --quiet --upgrade || true
            python add_must_change_password_column.py || echo "‚ö†Ô∏è Column may already exist"
            python create_member_requests_table.py || echo "‚ö†Ô∏è Table may already exist"
            sudo systemctl restart xploitrum-backend
            sleep 3
            cd ../frontend
            npm install --silent || true
            npm run build || true
            sudo systemctl restart xploitrum-frontend
            sleep 3
            sudo systemctl reload nginx
            echo "‚úÖ Deployment complete!"
